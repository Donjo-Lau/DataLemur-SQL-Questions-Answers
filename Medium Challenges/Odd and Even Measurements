/*
Step 1: Rank function to find the order in which measurements occured on each day specified by PARTITION by DATE(measurement_time)
Step 2: Convert DateTime stamp to only time
*/

WITH cte1 as (
SELECT 
measurement_id, measurement_value, measurement_time,
DATE(measurement_time) as measurement_day, 
measurement_time::timestamp::time as time_only, 
RANK() OVER (PARTITION BY DATE(measurement_time)  ORDER by measurement_time::timestamp::time ASC ) as order_per_day
FROM measurements
)

/*Step 3: we use the MOD function to find the remainder when dividign the order_by_day ranking by 2. 
with rankings that are odd like 1,3,5,7 which when divided by 2 have a remaidner of 1 -> odd
with rankings that are even like 2,4,6,8 which when divided by 2 have a remainder of 0 -> even
*/

select 
measurement_day,
SUM(case when MOD(order_per_day,2) = 0 then measurement_value else 0 end) as even_sum, 
SUM(case when MOD(order_per_day,2) = 1 then measurement_value else 0 end) as odd_sum
from cte1
GROUP by measurement_day
ORDER by measurement_day
